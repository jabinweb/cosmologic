generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  STUDENT
  INSTRUCTOR
  PARENT
  ADMIN
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  password        String
  name            String
  role            Role           @default(STUDENT)
  avatar          String?
  enrollments     Enrollment[]
  parentId        String? // For students linked to parents
  parent          User?          @relation("ParentToStudent", fields: [parentId], references: [id], onDelete: SetNull)
  children        User[]         @relation("ParentToStudent")
  specialization  String         @default("[]") // Store as JSON string
  bio             String?
  experience      Int?
  phone           String?
  grade           String?
  age             Int?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  emailVerified   DateTime?
  coursesTeaching Course[]       @relation("InstructorCourses")
  subscriptions   Subscription[]

  @@index([parentId])
}

model Course {
  id           String       @id @default(cuid())
  name         String
  description  String
  mode         String
  price        Float
  features     String       @default("[]") // Store as JSON string
  level        String
  instructorId String
  instructor   User         @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  enrollments  Enrollment[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([instructorId])
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  payment   Payment? @relation(fields: [paymentId], references: [id], onDelete: SetNull)
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paymentId String?

  @@index([userId])
  @@index([courseId])
  @@index([paymentId])
}

model Payment {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  amount         Int
  currency       String       @default("INR")
  razorpayId     String?
  status         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  enrollments    Enrollment[]

  @@index([subscriptionId])
}

model Subscription {
  id              String    @id @default(cuid())
  userId          String
  planId          String
  orderId         String    @unique
  razorpayOrderId String?   @unique
  paymentId       String?
  status          String
  amount          Int
  discount        Int       @default(0)
  activatedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments        Payment[]

  @@index([userId])
  @@index([razorpayOrderId])
}

model Plan {
  id          String   @id @default(cuid())
  type        String // basic, pro, premium
  name        String
  displayName String
  description String
  price       Int
  features    String // JSON array of features
  perks       String // JSON array of perks/benefits
  isFeatured  Boolean  @default(false)
  isActive    Boolean  @default(true)
  color       String   @default("bg-blue-500") // Tailwind color class
  order       Int      @default(0) // For custom sorting
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("Plan")
}

model Coupon {
  id         String   @id @default(cuid())
  code       String   @unique
  discount   Float
  maxUses    Int
  usedCount  Int      @default(0)
  validFrom  DateTime
  validUntil DateTime
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}
